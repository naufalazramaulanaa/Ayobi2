"use client";

import { useState } from "react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { DialogFooter } from "@/components/ui/dialog";
import { Upload, Video, Download, Sparkles } from "lucide-react";
import RichTextEditor from "@/components/ui/rich-text-editor";
import { uploadChunk } from "@/utils/uploadChunk"; // pastikan file ini sesuai

export default function LessonForm({
  onSubmit,
  moduleId,
  courseId,
}: {
  onSubmit: (data: Omit<Content, "id" | "order">) => void;
  moduleId: string;
  courseId: string;
}) {
  const [formData, setFormData] = useState({
    title: "",
    content: "",
    video: undefined as File | undefined,
  });
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsUploading(true);

    let videoPath = "";
    if (formData.video) {
      videoPath = await uploadChunk(
        formData.video,
        1024 * 1024,
        courseId,
        moduleId,
        (percent) => setUploadProgress(percent)
      );
    }

    const fullContent = `${formData.content}${videoPath ? `\nVideo: ${videoPath}` : ""}`.trim();

    onSubmit({
      title: formData.title,
      type: "lesson",
      content: fullContent,
    });

    setFormData({ title: "", content: "", video: undefined });
    setIsUploading(false);
  };

  const generateLessonContent = () => {
    const aiContents = [
      `<h1>${formData.title}</h1><p>This is an autogenerated lesson.</p>`,
      `<h2>Welcome to ${formData.title}</h2><p>Let's explore the topic.</p>`,
    ];
    const randomContent = aiContents[Math.floor(Math.random() * aiContents.length)];
    setFormData((prev) => ({ ...prev, content: randomContent }));
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-2">
        <Label htmlFor="lesson-title">Lesson Title</Label>
        <Input
          id="lesson-title"
          value={formData.title}
          onChange={(e) => setFormData((prev) => ({ ...prev, title: e.target.value }))}
          required
        />
      </div>

      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <Label>Lesson Content</Label>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={generateLessonContent}
            className="flex items-center gap-2"
          >
            <Sparkles className="w-4 h-4 text-purple-600" /> Generate with AI
          </Button>
        </div>
        <RichTextEditor
          value={formData.content}
          onChange={(val) => setFormData((prev) => ({ ...prev, content: val }))}
          placeholder="Write your lesson content here..."
        />
      </div>

      <div className="space-y-2">
        <Label>Upload Video</Label>
        <Input
          type="file"
          accept="video/*"
          onChange={(e) => setFormData((prev) => ({ ...prev, video: e.target.files?.[0] }))}
        />
        {isUploading && (
          <div className="text-sm text-gray-500">Uploading: {uploadProgress.toFixed(2)}%</div>
        )}
      </div>

      <DialogFooter>
        <Button type="submit" disabled={isUploading}>
          {isUploading ? "Uploading..." : "Add Lesson"}
        </Button>
      </DialogFooter>
    </form>
  );
}
